(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,"html, body {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    font-family: 'Montserrat Subrayada', sans-serif;\n}\n\n.main-div {\n    display: flex;\n    justify-content: center;\n    margin-top: 50px;\n\n    gap: 70px;\n}\n\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n\n    border: 10px solid black;\n}\n\n.player-coord, .computer-coord {\n    height: 80px;\n    width: 80px;\n    border: 2px solid black;\n}\n\n.computer-coord.safe:hover {\n    border-color:  yellow;\n    background-color: rgb(175, 73, 73);\n}\n\nh1 {\n    font-size: 100px;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    background-color: rgb(20, 120, 226);\n}\n\n.popup {\n    background-color: rgba(228, 207, 182, 0.5);\n    height: 100vh;\n    width: auto;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.popup-main-div {\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 50px;\n    border-radius: 10px;\n}\n\n.winner-popup {\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 50px;\n    border-radius: 10px; \n}\n\n.hidden {\n    display: none;\n}\n\n.starting-grid {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n\n    border: 2px solid black;\n}\n\n.starting-coord {\n    height: 40px;\n    width: 40px;\n    border: 2px solid black;\n}\n\nbutton {\n    padding: 50px;\n    font-size: 40px;\n    font-weight: bolder;\n}\n\n#place-ship {\n    font-size: 40px;\n    padding: 20px;\n    color: rgb(52, 153, 119);\n    background-color: rgb(180, 178, 178);\n    border-radius: 5px;\n}\n\n#battleship {\n    border-radius: 5px;\n    font-size: 60px;\n    padding: 20px;\n    background-color: rgb(180, 178, 178);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,+CAA+C;AACnD;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,gBAAgB;;IAEhB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,mCAAmC;;IAEnC,wBAAwB;AAC5B;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,uBAAuB;AAC3B;;AAEA;IACI,qBAAqB;IACrB,kCAAkC;AACtC;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mCAAmC;AACvC;;AAEA;IACI,0CAA0C;IAC1C,aAAa;IACb,WAAW;IACX,kBAAkB;IAClB,MAAM;IACN,SAAS;IACT,OAAO;IACP,QAAQ;IACR,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,mCAAmC;;IAEnC,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,aAAa;IACb,wBAAwB;IACxB,oCAAoC;IACpC,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,oCAAoC;AACxC",sourcesContent:["html, body {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    font-family: 'Montserrat Subrayada', sans-serif;\n}\n\n.main-div {\n    display: flex;\n    justify-content: center;\n    margin-top: 50px;\n\n    gap: 70px;\n}\n\n.board {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n\n    border: 10px solid black;\n}\n\n.player-coord, .computer-coord {\n    height: 80px;\n    width: 80px;\n    border: 2px solid black;\n}\n\n.computer-coord.safe:hover {\n    border-color:  yellow;\n    background-color: rgb(175, 73, 73);\n}\n\nh1 {\n    font-size: 100px;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    background-color: rgb(20, 120, 226);\n}\n\n.popup {\n    background-color: rgba(228, 207, 182, 0.5);\n    height: 100vh;\n    width: auto;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.popup-main-div {\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 50px;\n    border-radius: 10px;\n}\n\n.winner-popup {\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 50px;\n    border-radius: 10px; \n}\n\n.hidden {\n    display: none;\n}\n\n.starting-grid {\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n\n    border: 2px solid black;\n}\n\n.starting-coord {\n    height: 40px;\n    width: 40px;\n    border: 2px solid black;\n}\n\nbutton {\n    padding: 50px;\n    font-size: 40px;\n    font-weight: bolder;\n}\n\n#place-ship {\n    font-size: 40px;\n    padding: 20px;\n    color: rgb(52, 153, 119);\n    background-color: rgb(180, 178, 178);\n    border-radius: 5px;\n}\n\n#battleship {\n    border-radius: 5px;\n    font-size: 60px;\n    padding: 20px;\n    background-color: rgb(180, 178, 178);\n}"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],c=0;c<n.length;c++){var d=n[c],s=o.base?d[0]+o.base:d[0],l=a[s]||0,p="".concat(s," ").concat(l);a[s]=l+1;var A=t(p),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)e[A].references++,e[A].updater(u);else{var m=r(u,o);o.byIndex=c,e.splice(c,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var d=o(n,r),s=0;s<a.length;s++){var l=t(a[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=d}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),r=t.n(o),a=t(569),i=t.n(a),c=t(565),d=t.n(c),s=t(216),l=t.n(s),p=t(589),A=t.n(p),u=t(426),m={};m.styleTagTransform=A(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const g=()=>{const n=(()=>{const n=[],e=[],t=[];return(()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)n.push([e,t])})(),{occupiedCoordinates:e,placeShip:(n,o,r)=>{if(o+r<=10)for(let a=0;a<r;a+=1)e.push([n,o+a]),t.push([n,o+a])},receiveAttack:(n,e)=>{for(let o=0;o<t.length;o+=1)t[o][0]===n&&t[o][1]===e&&t.splice(o,1);return 0===t.length}}})(),e=[],t=[];for(let n=0;n<10;n+=1)for(let o=0;o<10;o+=1)e.push([n,o]),t.push([n,o]);const o=(e,o)=>{const{occupiedCoordinates:r}=n;for(let n=0;n<o;n+=1)for(let o=0;o<r.length;o+=1)if(r[o][0]===t[e][0]&&r[o][1]===t[e][1]+n)return!0;return!1};return{gameboard:n,attackRandomCoordinate:()=>{const n=Math.floor(Math.random()*e.length);return e.splice(n,1)[0]},placeShips:()=>{const e=[5,4,3,3,2];for(let r=0;r<5;r+=1){let a=Math.floor(Math.random()*t.length);for(;t[a][1]+e[r]>10||o(a,e[r]);)a=Math.floor(Math.random()*t.length);const i=t.splice(a,e[r])[0];n.placeShip(i[0],i[1],e[r])}}}},f=(()=>{const n=g(),e=g(),t=n.gameboard,o=(e.gameboard,(n,e,t)=>{const{occupiedCoordinates:o}=t;for(let t=0;t<o.length;t+=1)if(o[t][0]===n&&o[t][1]===e)return!0;return!1});return{playerBoard:t,checkIfSquareOccupied:o,callPlaceShips:()=>{e.placeShips()},startGame:()=>{!function(n,e){const t=document.getElementsByClassName("container")[0],o=document.createElement("div");o.className="header";const r=document.createElement("h1");r.id="title",r.innerHTML="BATTLESHIP",o.appendChild(r),t.appendChild(o),n.gameboard;const a=e.gameboard,i=document.createElement("div");i.className="main-div";const c=document.createElement("div");c.className="board player";for(let n=0;n<10;n+=1)for(let e=0;e<10;e+=1){const t=document.createElement("div");t.className="player-coord",t.id=n.toString()+e.toString()+"board",c.appendChild(t)}const d=document.createElement("div");d.className="board computer";for(let n=0;n<10;n+=1)for(let e=0;e<10;e+=1){const t=document.createElement("div");t.className="computer-coord safe",t.id=n.toString()+e.toString()+"comp",t.addEventListener("click",(o=>{"rgb(98, 169, 220)"!==t.style.backgroundColor&&(!0===f.checkIfSquareOccupied(n,e,a)?t.style.backgroundColor="green":t.style.backgroundColor="rgb(98, 169, 220)",t.className="computer-coord",a.receiveAttack(n,e)?h("You"):f.toggleComputer())})),d.appendChild(t)}i.appendChild(c),i.appendChild(d),t.appendChild(i),function(){const n=document.getElementsByClassName("container")[0],e=document.createElement("div");e.className="popup";const t=document.createElement("div");t.className="popup-main-div";const o=document.createElement("h2");o.innerHTML="Welcome to BATTLESHIP Soldier!",o.id="battleship",t.appendChild(o),function(n){const e=document.createElement("div");e.className="starting-grid";const t=[];t[0]=["Carrier",5],t[1]=["Battleship",4],t[2]=["Destroyer",3],t[3]=["Submarine",3],t[4]=["Patrol Boat",2];const o=document.createElement("h3");o.innerHTML=`Place your ${t[0][0].toUpperCase()}.`,o.id="place-ship",n.appendChild(o);for(let n=0;n<10;n+=1)for(let r=0;r<10;r+=1){const a=document.createElement("div");a.className="starting-coord",a.id=n.toString()+r.toString(),a.addEventListener("mouseover",(e=>{if(t[0][1]+r<=10&&0!==t.length)for(let e=0;e<t[0][1];e+=1){const t=document.getElementById(n.toString()+(r+e).toString());"grey"!==t.style.backgroundColor&&(t.style.backgroundColor="blue")}})),a.addEventListener("mouseout",(e=>{try{if(0!==t.length)for(let e=0;e<t[0][1];e+=1){const t=document.getElementById(n.toString()+(r+e).toString());"grey"!==t.style.backgroundColor&&(t.style.backgroundColor="white")}}catch{return}})),a.addEventListener("click",(e=>{if(t[0][1]+r<=10){let e=!1;const a=[];for(let o=0;o<t[0][1];o+=1){const t=document.getElementById(n.toString()+(r+o).toString());a.push(t),"grey"===t.style.backgroundColor&&(e=!0)}if(!e){for(let n=0;n<a.length;n+=1)a[n].style.background="grey";const e=t.shift();"Patrol Boat"===e[0]?b():o.innerHTML=`Place your ${t[0][0].toUpperCase()}.`,C(n,r,e[1])}}})),e.appendChild(a)}n.appendChild(e)}(t),e.appendChild(t),n.appendChild(e)}(),function(){const n=document.getElementsByClassName("popup")[0],e=document.createElement("div");e.className="winner-popup hidden";const t=document.createElement("h1");t.id="winner-tag",t.innerHTML="Oooga BOoga",e.appendChild(t);const o=document.createElement("button");o.innerHTML="RESTART",o.addEventListener("click",(n=>{window.location.reload()})),e.appendChild(o),n.appendChild(e)}()}(n,e)},toggleComputer:()=>{const n=e.attackRandomCoordinate(),r=n[0],a=n[1],i=o(r,a,t);!function(n,e){document.getElementById(n+"board").style.backgroundColor=e?"red":"rgb(98, 169, 220)"}(r.toString()+a.toString(),i),t.receiveAttack(r,a)&&h("Computer")}}})();function C(n,e,t){f.playerBoard.placeShip(n,e,t);for(let o=0;o<t;o+=1)document.getElementById(n.toString()+(e+o).toString()+"board").style.backgroundColor="grey";2===t&&f.callPlaceShips()}function h(n){document.getElementById("winner-tag").innerHTML=`${n} won!`;const e=document.getElementsByClassName("popup")[0],t=document.getElementsByClassName("winner-popup")[0];e.className="popup",t.className="winner-popup"}function b(){document.getElementsByClassName("popup")[0].className="popup hidden",document.getElementsByClassName("popup-main-div")[0].className="popup-main-div hidden"}f.startGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,